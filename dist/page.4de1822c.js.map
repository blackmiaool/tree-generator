{"version":3,"sources":["../index.js","index.js"],"names":["module","exports","data","toObject","arr","layer","map","name","descr","children","output","print","stack","forEach","node","index","isLast","length","printSingle","bit","main","require","document","querySelector","addEventListener","input","value","JSON","parse"],"mappings":";AAAA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wDAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,IAAA,IAAA,IAAA,EAAA,EAAA,EAAA,OAAA,cAAA,GAAA,EAAA,EAAA,QAAA,QAAA,EAAA,KAAA,EAAA,QAAA,GAAA,EAAA,SAAA,GAAA,GAAA,IAAA,MAAA,GAAA,GAAA,EAAA,EAAA,EAAA,QAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,GAAA,OAAA,EAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,mDAAA,SAAA,EAAA,GAAA,GAAA,OAAA,YAAA,OAAA,IAAA,uBAAA,OAAA,UAAA,SAAA,KAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,CAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,EAAA,QAAA,EAAA,EAAA,OAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,GAAAA,OAAOC,QAAU,SAAcC,GAwD3BA,EAXSC,SAAAA,EAASC,EAAKC,GACZD,OAAAA,EAAIE,IAAI,SAA6B,GAAA,IAAA,EAAA,EAAA,EAAA,GAA3BC,EAA2B,EAAA,GAArBC,EAAqB,EAAA,GAAdC,EAAc,EAAA,GACjC,MAAA,CACHF,KAAAA,EACAC,MAAAA,EACAC,SAAUA,GAAYN,EAASM,EAAUJ,EAAQ,GACjDA,MAAAA,KAKLF,CAASD,EAAM,GAClBQ,IAAAA,EAAS,GAENA,OA1DEC,SAAAA,EAAMP,EAAKQ,GAChBR,EAAIS,QAAQ,SAACC,EAAMC,GACTC,IAAAA,EAASD,IAAUX,EAAIa,OAAS,GAiBrCC,SAKN,GAJCJ,IAAAA,EAAAA,EAAAA,KAEAE,GADAD,EAAAA,MACAC,EAAAA,QACAJ,EAAAA,MAEMC,QAAQ,SAACM,GAEPT,GADAS,EACU,OAEA,SAMdT,GADAM,EACU,IAEA,IAEdN,GAAgBI,MAAAA,OAAAA,EAAKP,KAAQO,KAAAA,OAAAA,EAAKN,OAClCE,GAAU,KArCNQ,CAAY,CACRJ,KAAAA,EACAE,OAAQD,IAAUX,EAAIa,OAAS,EAC/BL,MAAAA,IAEAE,EAAKL,UAEDE,EAAMG,EAAKL,SAAcG,GAAAA,OAAAA,EAAAA,GADzBI,EACgC,CAAA,GAEA,CAAA,OA6ChDL,CAAMT,EAAM,IACLQ;;AC3DX,IAAMU,EAAKC,QAAQ,eAEnBC,SAASC,cAAc,WAAWC,iBAAiB,QAAQ,WACjDC,IAAAA,EAAMH,SAASC,cAAc,UAAUG,MAC7CJ,SAASC,cAAc,WAAWG,MAAMN,EAAKO,KAAKC,MAAMH","file":"page.4de1822c.js","sourceRoot":"../page","sourcesContent":["module.exports = function main(data) {\n    function print(arr, stack) {\n        arr.forEach((node, index) => {\n            const isLast = index === arr.length - 1;\n            printSingle({\n                node,\n                isLast: index === arr.length - 1,\n                stack\n            });\n            if (node.children) {\n                if (isLast) {\n                    print(node.children, [...stack, 0]);\n                } else {\n                    print(node.children, [...stack, 1]);\n                }\n\n            }\n        });\n    }\n\n    function printSingle({\n        node,\n        index,\n        isLast,\n        stack\n    }) {\n        stack.forEach((bit) => {\n            if (bit) {\n                output += '│   '\n            } else {\n                output += '    '\n            }\n\n        });\n\n        if (isLast) {\n            output += '└'\n        } else {\n            output += '├'\n        }\n        output += `── ${node.name} ${node.descr}`;\n        output += '\\n';\n    }\n\n\n    function toObject(arr, layer) {\n        return arr.map(([name, descr, children]) => {\n            return {\n                name,\n                descr,\n                children: children && toObject(children, layer + 1),\n                layer\n            }\n        });\n    }\n\n    data = toObject(data, 0);\n    let output = '';\n    print(data, []);\n    return output;\n}\n","const main=require(\"../index.js\");\n\ndocument.querySelector(\"#submit\").addEventListener('click',()=>{\n    const input=document.querySelector(\"#input\").value ;\n    document.querySelector(\"#output\").value=main(JSON.parse(input));\n});"]}